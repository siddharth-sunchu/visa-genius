import React, { useState, useEffect } from 'react';
import {
  Form,
  Input,
  Button,
  Card,
  Typography,
  Row,
  Col,
  Space,
  message,
  Steps,
  Progress,
  Tag
} from 'antd';
import {
  FileTextOutlined,
  SaveOutlined,
  DownloadOutlined,
  EyeOutlined,
  CheckCircleOutlined
} from '@ant-design/icons';
import { useAppDispatch, useAppSelector } from '../store/hooks';
import { updateQuestionnaireData, updateSubsectionProgress } from '../store/slices/applicationSlice';

const { Title, Text } = Typography;
const { TextArea } = Input;
const { Step } = Steps;

interface PetitionSection {
  id: string;
  title: string;
  description: string;
  content: string;
  isCompleted: boolean;
  required: boolean;
}

const PetitionLetterForm: React.FC = () => {
  const dispatch = useAppDispatch();
  const { questionnaireData } = useAppSelector((state: any) => state.application);
  const [currentStep, setCurrentStep] = useState(0);
  const [petitionData, setPetitionData] = useState<Record<string, any>>(
    questionnaireData.petition_letter || {}
  );
  const [form] = Form.useForm();

  const petitionSections: PetitionSection[] = [
    {
      id: 'introduction',
      title: 'Introduction',
      description: 'Personal introduction and background',
      content: petitionData.introduction || '',
      isCompleted: !!petitionData.introduction,
      required: true
    },
    {
      id: 'qualifications',
      title: 'Qualifications & Education',
      description: 'Academic and professional qualifications',
      content: petitionData.qualifications || '',
      isCompleted: !!petitionData.qualifications,
      required: true
    },
    {
      id: 'achievements',
      title: 'Major Achievements',
      description: 'Key accomplishments and recognitions',
      content: petitionData.achievements || '',
      isCompleted: !!petitionData.achievements,
      required: true
    },
    {
      id: 'contributions',
      title: 'Field Contributions',
      description: 'Significant contributions to the field',
      content: petitionData.contributions || '',
      isCompleted: !!petitionData.contributions,
      required: true
    },
    {
      id: 'impact',
      title: 'Impact & Influence',
      description: 'Demonstrated impact on the field',
      content: petitionData.impact || '',
      isCompleted: !!petitionData.impact,
      required: true
    },
    {
      id: 'future_plans',
      title: 'Future Plans',
      description: 'Plans for continued contributions in the US',
      content: petitionData.future_plans || '',
      isCompleted: !!petitionData.future_plans,
      required: true
    },
    {
      id: 'conclusion',
      title: 'Conclusion',
      description: 'Summary and request for approval',
      content: petitionData.conclusion || '',
      isCompleted: !!petitionData.conclusion,
      required: true
    }
  ];

  const [sections, setSections] = useState<PetitionSection[]>(petitionSections);

  useEffect(() => {
    // Update sections when petitionData changes
    setSections(petitionSections);
  }, [petitionData]);

  const handleSectionSave = async () => {
    try {
      const values = await form.validateFields();
      const currentSection = sections[currentStep];
      
      const updatedData = {
        ...petitionData,
        [currentSection.id]: values.content
      };
      
      setPetitionData(updatedData);
      
      // Update Redux store
      dispatch(updateQuestionnaireData({
        section: 'petition_letter',
        data: updatedData
      }));

      // Update subsection progress
      dispatch(updateSubsectionProgress({
        section: 'petition_letter',
        subsection: currentSection.id,
        completed: true
      }));

      message.success(`${currentSection.title} saved successfully!`);
      
      // Move to next step if not the last one
      if (currentStep < sections.length - 1) {
        setCurrentStep(currentStep + 1);
        form.setFieldsValue({ content: sections[currentStep + 1].content });
      }
    } catch (error) {
      message.error('Please fill in the required content');
    }
  };

  const handleStepClick = (step: number) => {
    setCurrentStep(step);
    form.setFieldsValue({ content: sections[step].content });
  };

  const generateFullPetition = () => {
    const fullPetition = sections.map(section => {
      return `## ${section.title}\n\n${petitionData[section.id] || '[Content not yet written]'}\n\n`;
    }).join('---\n\n');

    return `# EB1A Petition Letter

${fullPetition}

---
*Generated by VisaGenius EB1A Application System*
*Date: ${new Date().toLocaleDateString()}*
`;
  };

  const downloadPetition = () => {
    const content = generateFullPetition();
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'eb1a_petition_letter.txt';
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
    message.success('Petition letter downloaded successfully!');
  };

  const previewPetition = () => {
    const content = generateFullPetition();
    const newWindow = window.open('', '_blank');
    if (newWindow) {
      newWindow.document.write(`
        <html>
          <head>
            <title>EB1A Petition Letter Preview</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
              h1 { color: #1890ff; border-bottom: 2px solid #1890ff; padding-bottom: 10px; }
              h2 { color: #333; margin-top: 30px; }
              .section { margin-bottom: 30px; }
              .divider { border-top: 1px solid #ddd; margin: 20px 0; }
            </style>
          </head>
          <body>
            <pre style="white-space: pre-wrap; font-family: inherit;">${content}</pre>
          </body>
        </html>
      `);
      newWindow.document.close();
    }
  };

  const completedSections = sections.filter(section => section.isCompleted).length;
  const progressPercentage = (completedSections / sections.length) * 100;

  return (
    <div>

      {/* Progress Overview */}
      <Card style={{ marginBottom: '24px', borderRadius: '12px' }}>
        <Row align="middle" justify="space-between" style={{ marginBottom: '16px' }}>
          <Col>
            <Title level={4} style={{ margin: 0 }}>
              Progress: {completedSections} of {sections.length} sections completed
            </Title>
            <Text type="secondary">
              {progressPercentage === 100 ? 'âœ… Petition letter is complete!' : 'Continue completing sections'}
            </Text>
          </Col>
          <Col>
            <Progress 
              type="circle" 
              percent={Math.round(progressPercentage)} 
              size={60}
              strokeColor={progressPercentage === 100 ? "#52c41a" : "#1890ff"}
            />
          </Col>
        </Row>
      </Card>

      <Row gutter={[24, 24]}>
        {/* Steps Navigation */}
        <Col xs={24} lg={8}>
          <Card style={{ borderRadius: '12px' }}>
            <Title level={4} style={{ marginBottom: '16px' }}>
              Petition Sections
            </Title>
            <Steps
              direction="vertical"
              current={currentStep}
              size="small"
            >
              {sections.map((section, index) => (
                <Step
                  key={section.id}
                  title={
                    <Space>
                      <Text strong>{section.title}</Text>
                                             {section.isCompleted && (
                         <Tag color="success" icon={<CheckCircleOutlined />}>
                           Done
                         </Tag>
                       )}
                    </Space>
                  }
                  description={
                    <div>
                      <Text type="secondary" style={{ fontSize: '12px' }}>
                        {section.description}
                      </Text>
                                             {section.required && (
                         <Tag color="red" style={{ marginTop: '4px' }}>
                           Required
                         </Tag>
                       )}
                    </div>
                  }
                  status={section.isCompleted ? 'finish' : currentStep === index ? 'process' : 'wait'}
                  onClick={() => handleStepClick(index)}
                  style={{ cursor: 'pointer' }}
                />
              ))}
            </Steps>
          </Card>
        </Col>

        {/* Content Editor */}
        <Col xs={24} lg={16}>
          <Card style={{ borderRadius: '12px' }}>
            <div style={{ marginBottom: '16px' }}>
              <Title level={4} style={{ margin: 0 }}>
                {sections[currentStep]?.title}
              </Title>
              <Text type="secondary">
                {sections[currentStep]?.description}
              </Text>
            </div>

            <Form form={form} layout="vertical">
              <Form.Item
                name="content"
                rules={[
                  { required: sections[currentStep]?.required, message: 'This section is required' }
                ]}
              >
                <TextArea
                  rows={12}
                  placeholder={`Write your ${sections[currentStep]?.title.toLowerCase()} content here...`}
                  style={{ fontSize: '14px', lineHeight: '1.6' }}
                />
              </Form.Item>

              <Space>
                <Button
                  type="primary"
                  icon={<SaveOutlined />}
                  onClick={handleSectionSave}
                >
                  Save & Continue
                </Button>
                {currentStep > 0 && (
                  <Button
                    onClick={() => {
                      setCurrentStep(currentStep - 1);
                      form.setFieldsValue({ content: sections[currentStep - 1].content });
                    }}
                  >
                    Previous
                  </Button>
                )}
              </Space>
            </Form>
          </Card>
        </Col>
      </Row>

      {/* Action Buttons */}
      {progressPercentage > 0 && (
        <Card style={{ marginTop: '24px', borderRadius: '12px' }}>
          <Title level={4} style={{ marginBottom: '16px' }}>
            Petition Letter Actions
          </Title>
          <Space wrap>
            <Button
              type="primary"
              icon={<EyeOutlined />}
              onClick={previewPetition}
              disabled={progressPercentage < 50}
            >
              Preview Letter
            </Button>
            <Button
              type="default"
              icon={<DownloadOutlined />}
              onClick={downloadPetition}
              disabled={progressPercentage < 50}
            >
              Download Letter
            </Button>
            {progressPercentage === 100 && (
              <Tag color="success" icon={<CheckCircleOutlined />}>
                Petition Letter Complete!
              </Tag>
            )}
          </Space>
        </Card>
      )}

      {/* Tips Card */}
      <Card style={{ marginTop: '24px', borderRadius: '12px' }}>
        <Title level={4} style={{ marginBottom: '16px' }}>
          Tips for Writing a Strong Petition Letter
        </Title>
        <Row gutter={[16, 16]}>
          <Col xs={24} sm={12}>
            <Card size="small" style={{ backgroundColor: '#f6ffed' }}>
              <Title level={5}>Be Specific</Title>
              <Text>Include specific examples, dates, and measurable achievements rather than general statements.</Text>
            </Card>
          </Col>
          <Col xs={24} sm={12}>
            <Card size="small" style={{ backgroundColor: '#fff7e6' }}>
              <Title level={5}>Show Impact</Title>
              <Text>Demonstrate how your work has influenced your field and benefited others.</Text>
            </Card>
          </Col>
          <Col xs={24} sm={12}>
            <Card size="small" style={{ backgroundColor: '#f0f9ff' }}>
              <Title level={5}>Use Evidence</Title>
              <Text>Reference publications, awards, media coverage, and other supporting evidence.</Text>
            </Card>
          </Col>
          <Col xs={24} sm={12}>
            <Card size="small" style={{ backgroundColor: '#fef2f2' }}>
              <Title level={5}>Future Plans</Title>
              <Text>Clearly articulate your plans for continued contributions in the United States.</Text>
            </Card>
          </Col>
        </Row>
      </Card>
    </div>
  );
};

export default PetitionLetterForm; 